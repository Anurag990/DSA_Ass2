package DSA_Ass3;import java.util.Scanner;//Time Complexity = O(log n)//Space Complexity = O(1)public class ques2 {    public static int LastOccurrence(int []arr,int target)    {        int n = arr.length,low = 0,upper = n-1,answer = -1;        while(low<=upper)        {            int mid = (low + upper) / 2;            if(arr[mid] == target)            {                answer = mid;                low = mid + 1;            }            else if(arr[mid] > target)            {                upper = mid - 1;            }            else if(arr[mid] < target)            {                low = mid + 1;            }        }        return answer;    }    public static void main(String[] args) {        //Given an array and an integer "target",return the last occurrence of        //"target" in the array.If the target is not present return -1.        //Input 1: arr = {1 1 1 2 3 4 4 5 6 6 6 6 } ,target = 4        //Output 1: 6        //In this given array , array is sorted then we can use binary search        //to reduce the time complexity        Scanner sc = new Scanner(System.in);        System.out.println("Enter the number of elements you want to add :  ");        int n = sc.nextInt();        int []arr = new int[n];        System.out.println("Enter the elements of the array :");        for(int i=0;i<n;i++)        {            arr[i] = sc.nextInt();        }        System.out.println("Enter the elements to be searched in array : ");        int target = sc.nextInt();        int a = LastOccurrence(arr, target);        if(a==-1)        {            System.out.println("Element not found  " + a);        }        else        {            System.out.println("Element found at index " + a);        }    }}